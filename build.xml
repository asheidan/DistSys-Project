<!--
	build.xml
-->
<project name="GCom" default="compile" basedir=".">
	<!-- taskdef resource="net/sf/antcontrib/antlib.xml"/ -->
	<property name="src.gcom" location="src/gcom" />
	<property name="src.gui" location="src/gui" />
	<property name="src.rmi" location="src/rmi" />
	<property name="src.test" location="src/test" />
	<property name="build" location="bin" />
	<property name="reports" location="reports" />
	<property name="ant.build.javac.source" value="1.6" />
	<property name="ant.build.javac.target" value="1.6" />
	<property file="local.properties" />

	<property name="junit.jar" location="libs/junit-4.7.jar" />
	<property name="log4j.jar" location="libs/log4j-1.2.15.jar" />
	<property name="beans.jar" location="libs/beansbinding-1.2.1.jar" />
	<property name="appframework.jar" location="libs/appframework-1.0.3.jar" />
	<property name="layout.jar" location="libs/swing-layout-1.0.3.jar" />
	<property name="worker.jar" location="libs/swing-worker-1.1.jar" />

	<target name="setversion">
		<condition property="version">
			<equals arg1="1.6" arg2="${ant.java.version}" trim="true"/>
		</condition>
	</target>
	<target name="version" depends="setversion" unless="version">
		<echo>This is version "${ant.java.version}"</echo>
		<echo>Some of the code we use only work in Java 1.6.</echo>
	</target>

	<target name="init" depends="version">
		<mkdir dir="${build}" />
		<mkdir dir="${reports}" />
	</target>

	<target name="compile" depends="compile.gcom.src,compile.gui.src,compile.rmi.src,compile.test.src" />

	<target name="compile.gcom.src" depends="init" description="Compiling source-files">
		<javac srcdir="${src.gcom}" destdir="${build}" debug="${javac.debug}" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint" />
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${log4j.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</javac>
	</target>

	<target name="compile.rmi.src" depends="init,compile.gcom.src">
		<javac srcdir="${src.rmi}" destdir="${build}" debug="${javac.debug}" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint" />
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${junit.jar}" />
				<pathelement location="${log4j.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</javac>
	</target>

	<target name="compile.test.src" depends="init,compile.gcom.src" description="Compiling test-source-files">
		<javac srcdir="${src.test}" destdir="${build}" debug="${javac.debug}" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint" />
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${junit.jar}" />
				<pathelement location="${log4j.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</javac>
	</target>

	
	<target name="rmi" depends="compile.rmi.src">
		<java classname="rmi.RMIServer" fork="true"><!-- spawn="true"-->
			<arg value="${rmi.port}" />
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${log4j.jar}" />
				<pathelement location="${layout.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	
	<target name="seq" depends="compile.rmi.src">
		<java classname="rmi.Sequencer" fork="true"><!-- spawn="true"-->
			<arg value="${rmi.port}" />
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${log4j.jar}" />
				<pathelement location="${layout.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	
	<target name="compile.gui.src" depends="compile.gcom.src" description="Compiling source-files">
		<javac srcdir="${src.gui}" destdir="${build}" debug="${javac.debug}" debuglevel="lines,vars,source">
			<!--compilerarg value="-Xlint" /-->
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${junit.jar}" />
				<pathelement location="${log4j.jar}" />
				<pathelement location="${beans.jar}" />
				<pathelement location="${appframework.jar}" />
				<pathelement location="${layout.jar}" />
				<pathelement location="${worker.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</javac>
		<copy todir="${build}/gui/resources" verbose="false">
			<fileset dir="${src.gui}/resources">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="gui" depends="compile.gui.src">
		<java classname="gui.NetBeansGUIApp" fork="true" failonerror="true">
			<jvmarg value="-Djava.rmi.server.codebase=file://${build}/"/>
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${junit.jar}" />
				<pathelement location="${log4j.jar}" />
				<pathelement location="${beans.jar}" />
				<pathelement location="${appframework.jar}" />
				<pathelement location="${layout.jar}" />
				<pathelement location="${worker.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>

	<target name="clean.all" description="Removes ${build}">
		<delete dir="${build}" />
		<delete dir="${reports}" />
		<delete dir="build/" />
	</target>

	<target name="test" depends="compile.gcom.src,compile.rmi.src,compile.test.src">
		<junit printsummary="true" haltonfailure="true">
			<classpath>
				<pathelement location="${build}" />
				<pathelement path="${junit.jar}" />
				<pathelement location="${log4j.jar}" />
				<pathelement path="${java.class.path}" />
			</classpath>

			<!-- formatter type="brief" / -->
			<formatter type="plain" />

			<batchtest todir="${reports}" failureproperty="test.failed" haltonfailure="no">
				<fileset dir="src/">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--target name="display.log">
		<echo message="${file.name}" />
		<loadresource property="test.error.log">
			<fileset file="${file.name}" />
		</loadresource>
		<echo message="${test.error.log}" />
	</target-->

</project>
